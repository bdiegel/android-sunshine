Anrdoid Study Jam 

Instructor: Evan Halley
Wifi: Welcome!

Week 1
------
Layouts: Linear, Frame, Relative
ListAdapter: binds data to ListView
- list item layout for elements
- view recycling
  - view are reused as they scroll offscreen
  - the view is reused and layout is alread inflated
  - other views (like grid) recycle
- google material guidelines
  - advocates using a recycler view
	RecyclerView.Adapter
  - separates creating the view and binding data
  - similar to the cursoradapter
    - newView - view inflation
    - bindView


View holder pattern?
- literally a container that holds references to your views
  http://developer.android.com/training/improving-layouts/smooth-scrolling.html

Questions:

minSdkkVersion
targetSdkVersion
compatibility library


Week 2
------
- web apis & http requests
- logcat
- main vs background thread
- menus
- permssions
- json parsing

- Android recommends HttpUrlConnection
- note: extra work involved with https + self-signed certificate
- OkHTTP

- Android attempts to render UI at 60fps (every 16.67ms)
  if it can't -> jitter
- tools reviewed for debugging ui performance:
  http://www.curious-creature.com/docs/android-performance-case-study-1.html
  - Developer Options: 
    Profile GPU rendering: on screen as bars || dump 

- AsyncTask<Params, Progress, Result>
  doInBackground(Params...) <- array of your objects 
- should use a Service for this?
- AsyncTasks run in serial (they block other async tasks)
- can be called in parallel:
  task.executeOnExecutor(Executor exec, String)
  task.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, ...

Permissions
- requests defined in Android manifest: <uses-permission
  
Android Studio shortcuts and tips
- Generate menu: ALT+Ins (linux)
- CTRL+B: Go to declaration (from resource id to resource xml file)
- developer options: show touches, show cpu usage
  profile gpu rendering
  debug gpu overdraw - show wasted resources

Open Weather API
- use: q=<zipcode>,usa

Questions:
  do you use 3rd libs like retrofit (square) + gson?


Week 3
------
New Activities & Intents
- click listeners, toasts, creating and starting activities
- prefs, intents, broadcast recv

Intents
- explicit (specifies Activity) 
- implicit (by action)
  new Intent(Intent.ACTION_SEND)
- intents can carry data
  intent.putExtra(Intent.EXTRA_TEXT, message)
- URIs used 
- intent types: HTTP.PLAIN_TEXT
- startActivity(intent), startService(..), sendBroadcast(..
- apps declare intent-filters to define types of intents they handle

Preferences
- xml/prefs_general.xml
- SettingsActivity
- stored in SharedPreferences object
- written to file in apps private storage
  /data/data/<app>/shared_prefs
  the database files are also here
- recommended now to use PreferenceFragment (instead of Activity)
- can have dependencies in the xml using the 'key' of another pref
- setShareHistoryFileName <- to remember the user choice


Resources:
- youtube: androiddevelopers
- developer.android.com/guide


Questions:
- Material Design: RecyclerView, Toolbar, Cards
- recommendations for low-fidelity wireframe tools
- are google apps open source
- other common adapters?

Week 4
------
Lesson 4a - ContentProviders


Week 5
------
Activity lifecycle + SavedInstanceState
- onSaveInstanceState(Bundle bundle)
  bundle.putString("key", value)
  extract data from Bundle in onCreate(Bundle bundle)
- bundle may be null in onCreate
- useful for saving/restoring form state between orientation change
- CTRL + F11 <- rotate the emulator

ContentProviders
- share data between apps
- abstract data implementation from client
- used syncadapters, loaders, cursoradapters
- Settings -> Accounts - displays syncadapters on device
- Loaders (later lesson) 
- created DBHelper class to manage SQLite

Building ContentProvider
1. determine URIs
2. update contract class
3. fill out URIMatcher
   maps URIs to constants used by contentprovider functions
4. implement functions 
   query, insert, update, delete
   onCreate, 
   getType(uri) - returns MIMETYPE of data at URI

Declaring ContentProvider
- can be 'exported' for use by other apps
- define in manifest

URIs
- content://<authority>/<path>/<query>

Next week:
Lesson 4c/5
Loaders and Responsive Layouts
Final Projects:




 
